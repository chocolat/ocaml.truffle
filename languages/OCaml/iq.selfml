(detector
    (extension ml)
    (extension mli))

(folding
    (start [(\b(module|class|)\s.*?=\s*$|\bbegin|sig|struct|(object(\s*\(_?[a-z]+\))?)\s*$|\bwhile\s.*?\bdo\s*$|^let(?:\s+rec)?\s+[a-z_][a-zA-Z0-9_]*\s+(?!=)\S)])
    (stop [(\bend(\s+in)?[ \t]*(;{1,2}|=)?|\bdone;?|^\s*;;|^\s*in)[ \t]*$]))

(indentation.decrease [^\s*(end|done|with|in|else)\b|^\s*;;|^[^\("]*\)])

(indentation.increase [^.*(\([^)"\n]*|begin)$|\bobject\s*$|\blet [a-zA-Z0-9_-]+( [^ ]+)+ =\s*$|method[ \t]+.*=[ \t]*$|->[ \t]*$|\b(for|while)[ \t]+.*[ \t]+do[ \t]*$|(\btry$|\bif\s+.*\sthen$|\belse|[:=]\s*sig|=\s*struct)\s*$])

(indentation.increase-next-line-only [(?!\bif.*then.*(else.*|(;|[ \t]in)[ \t]*$))\bif|\bthen[ \t]*$|\belse[ \t]*$$])

(shell-variables
    (TM_COMMENT_START [(* ])
    (TM_COMMENT_END [ *)]))

(comment.block [(* ] [ *)])

(in entity.name.type.class.ocaml
    (symbol-list
        (transformation [s/^/class: /])))

(in entity.name.type.exception.ocaml
    (symbol-list
        (transformation [s/^/exception: /])))

(in entity.name.type.pattern.stupid-goddamn-hack.ocamllex
    (symbol-list
        (transformation [s/^/pattern: /])))

(in entity.name.type.pattern.reference.stupid-goddamn-hack.ocamllex
    (symbol-list))

(in entity.name.function.entrypoint.ocamllex
    (symbol-list
        (transformation [s/^/entrypoint: /])))

(in entity.name.function.non-terminal.ocamlyacc
    (symbol-list
        (transformation [s/^/non-terminal: /])))

(in entity.name.function.non-terminal.reference.ocamlyacc
    (symbol-list))

(in entity.name.type.token.ocamlyacc
    (symbol-list
        (transformation [s/^/token: /])))

(in entity.name.type.token.reference.ocamlyacc
    (symbol-list))

(in storage.type.user-defined.ocaml
    (symbol-list
        (transformation [s/^/type: /])))

(in [entity.name.type.variant.ocaml | entity.name.type.variant.polymorphic.ocaml]
    (symbol-list))

(pair "
    "
    (smart-typing))

(pair `[`
    `]`
    (smart-typing)
    (highlight))

(pair [(]
    [)]
    (smart-typing)
    (highlight))

(pair [{]
    [}]
    (smart-typing)
    (highlight))